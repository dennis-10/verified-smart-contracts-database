{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "project:/contracts/AshZero.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/////////////////////////////////\n//                             //\n//                             //\n//                             //\n//                             //\n//                             //\n//           Ash Zero          //\n//              â€”              //\n//             0xG             //\n//                             //\n//                             //\n//                             //\n//                             //\n/////////////////////////////////\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ICreatorExtensionTokenURI is IERC165 {\n  function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\n}\n\ncontract AshZero is ICreatorExtensionTokenURI {\n  address private _creator;\n  address private _ash;\n  address private _owner;\n  uint8 state = 0;\n  uint public max;\n  mapping(uint => uint) public seeds;\n\n  constructor(address creator, address ash) {\n    _creator = creator;\n    _ash = ash;\n    _owner = msg.sender;\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\n    return interfaceId == type(ICreatorExtensionTokenURI).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  function setState(uint8 newstate) external {\n    require(msg.sender == _owner, 'unauthorized');\n    state = newstate;\n  }\n\n  function drop(address[] memory to) external {\n    require(msg.sender == _owner, 'unauthorized');\n    state = 1;\n    for (uint8 i=0; i<to.length; i++) {\n      _mint(to[i]);\n    }\n  }\n\n  event Mint(address to, uint id);\n  function mint() external {\n    require(state == 1, 'mint disabled');\n    require(IERC721(_creator).balanceOf(msg.sender) == 0, 'only one per wallet');\n    _mint(msg.sender);\n  }\n\n  function _mint(address to) internal {\n    uint balance = IERC20(_ash).balanceOf(to) / 1000000000000000000;\n    require(balance > 0, 'need to own some ash to mint');\n    uint tokenId = IERC721CreatorCore(_creator).mintExtension(to);\n    seeds[tokenId] = balance;\n    if (tokenId > 3 && balance > max) {\n      max = balance;\n    }\n    emit Mint(to, tokenId);\n  }\n\n  // Classes.\n  // 0 the most rare. There are only four: token 1, 2, 3 and the highest Ash balance.\n  // 1-199 the lower the more rare.\n  // 200 common. This is a holder who has carbon role (< 100 Ash).\n  function getClass(uint tokenId) public view returns (uint) {\n    return tokenId < 4 || seeds[tokenId] == max ? 0 : seeds[tokenId] < 100 ? 200 : 200 - (199 * seeds[tokenId] / max);\n  }\n\n  function tokenURI(address creator, uint256 tokenId) external view override returns (string memory) {\n    require(creator == _creator, 'invalid creator');\n    require(seeds[tokenId] != 0, 'AshZero: URI query for nonexistent token');\n    uint c = getClass(tokenId);\n\n    return string(\n      abi.encodePacked(\n        \"data:application/json;utf8,\",\n        '{\"name\":\"Zero',\n        c > 0 ? string(abi.encodePacked(\" [\", toString(c), \"]\")) : \"\",\n        '\",\"created_by\":\"0xG\",\"description\":\"Memory.\",\"image\":\"',\n          \"data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' style='background-color: %23\",\n          tokenId == 3 ? \"fff\" : \"111\",\n          \"'%3E%3Crect stroke-dasharray='\",\n          c == 0 ? \"0\" : c == 200 ? \"1\" : toString(200 - c),\n          \"' height='50' width='50' y='25' x='25' stroke='%23\",\n          tokenId == 3 ? \"111\" : c == 0 && tokenId < 3 ? \"fff\" : c == 200 ? \"42474c\" : \"c9cbce\",\n          \"' fill='transparent' /%3E%3C/svg%3E\",\n        '\",\"attributes\":[',\n          '{\"trait_type\":\"Class\",\"value\":\"',toString(c),'\"},',\n          '{\"trait_type\":\"Seed\",\"value\":\"',toString(seeds[tokenId]),'\"}',\n        \"]}\"\n      )\n    );\n  }\n\n  // Taken from \"@openzeppelin/contracts/utils/Strings.sol\";\n  function toString(uint256 value) internal pure returns (string memory) {\n    if (value == 0) {\n      return \"0\";\n    }\n    uint256 temp = value;\n    uint256 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n}\n\ninterface IERC721 is IERC165 {\n  function balanceOf(address owner) external view returns (uint256 balance);\n}\n\ninterface IERC20 {\n  function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IERC721CreatorCore {\n  function mintExtension(address to) external returns (uint256);\n}\n\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}