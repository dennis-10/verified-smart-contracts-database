{{
  "language": "Solidity",
  "sources": {
    "contracts/BonsaiDreaming.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract BonsaiDreaming is ERC721Enumerable, Ownable, ReentrancyGuard {\r\n    uint256 public constant MAX_TOKENS = 255;\r\n    \r\n    event MintedToken(address sender, uint256 tokenID);\r\n    \r\n    uint256 public PUBLIC_SALE_MINT_PRICE = 0.065 ether;\r\n    uint256 public mintedBonsaiBitfield;\r\n    uint256 public numberOfMints;\r\n    bytes[] private _tokenDatas;\r\n    mapping(uint8 => uint256) private _bonsaiIdxToTokenDataIdx;\r\n    mapping(uint8 => uint8) private _backgroundCounts;\r\n    mapping(uint8 => uint8) private _effectCounts;\r\n\r\n    string[50] private _coordinateLookup;\r\n    int8[8] private _deltaX;\r\n    int8[8] private _deltaY;\r\n\r\n    bool public mintingCompleteAndVerified;\r\n\r\n    struct SVGCursor {\r\n        bool rowEven;\r\n        uint8 x; // primary pixels (every even pixel) has an x, y and color\r\n        uint8 y;\r\n        string color; // color is found in a 5-bit (32 color) LUT => 5 bit used for primary pixels\r\n        int8 dx;  // secondary pixels have an offset (dx, dy) from where they copy a primary pixel\r\n        int8 dy;  // there are 8 locations possible to copy from for each pixel => 3 bit used for secondary pixels\r\n    }\r\n\r\n    constructor() ERC721(\"BonsaiDreaming\", \"BONSAIDREAMING\") {\r\n        // base64-encoded svg coordinates from -2*8 to 47*8 (pixels render at 8x8 screen pixels)\r\n        _coordinateLookup = [\r\n          \"LTE2\", // -2\r\n          \"LTA4\", // -1\r\n          \"MDAw\", // 0\r\n          \"MDA4\", // 1\r\n          \"MDE2\", // ...\r\n          \"MDI0\", \"MDMy\", \"MDQw\", \"MDQ4\", \"MDU2\", \"MDY0\", \"MDcy\", \"MDgw\", \"MDg4\", \"MDk2\", \"MTA0\", \"MTEy\", \"MTIw\", \"MTI4\", \"MTM2\", \"MTQ0\", \"MTUy\", \"MTYw\", \"MTY4\", \"MTc2\", \"MTg0\", \"MTky\", \"MjAw\", \"MjA4\", \"MjE2\", \"MjI0\", \"MjMy\", \"MjQw\", \"MjQ4\", \"MjU2\", \"MjY0\", \"Mjcy\", \"Mjgw\", \"Mjg4\", \"Mjk2\", \"MzA0\", \"MzEy\", \"MzIw\", \"MzI4\", \"MzM2\", \"MzQ0\", \"MzUy\", \"MzYw\", \"MzY4\", \"Mzc2\"];\r\n        \r\n        _deltaX = [-1, -1, 1, 1, 0, 2, 0, -2]; // these are used for decoding the relative coordinates of secondary pixels\r\n        _deltaY = [-2, 0, 0, 2, -1, -1, 1, 1];\r\n    }\r\n\r\n    function getBackgroundCount(uint8 bgIdx) external view returns (uint8) {\r\n        return _backgroundCounts[bgIdx];\r\n    }\r\n\r\n    function getEffectCount(uint8 effectIdx) external view returns (uint8) {\r\n        return _effectCounts[effectIdx];\r\n    }\r\n\r\n    function getBonsaiIdx(uint256 tokenId) external view returns (uint8) {\r\n        require(tokenId <= numberOfMints && tokenId > 0, \"Invalid tokenId\");\r\n        uint8 retVal = 255; // invalid\r\n        for(uint8 i = 0; i < 255; i++) {\r\n            if(_bonsaiIdxToTokenDataIdx[i] == tokenId) {\r\n                retVal = i;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function _getBonsaiIdx(bytes memory tokenData) pure internal returns (uint8) {\r\n        uint8 bonsaiIdx = 0;\r\n        for (uint8 i = 0; i < 8; i++) {\r\n            bonsaiIdx = bonsaiIdx | ((uint8(tokenData[i + 8]) & uint8(1)) << i);\r\n        }\r\n        require(bonsaiIdx < 255, \"Invalid bonsaiIdx\");\r\n        return bonsaiIdx;\r\n    }\r\n\r\n    function _getBgIdx(bytes memory tokenData) pure internal returns (uint8) {\r\n        uint8 bgIdx = 0;\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            bgIdx = bgIdx | ((uint8(tokenData[i + 4]) & uint8(1)) << i);\r\n        }\r\n        return bgIdx;\r\n    }\r\n\r\n    function _getEffectIdx(bytes memory tokenData) pure internal returns (uint8) {\r\n        uint8 effectIdx = 0;\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            effectIdx = effectIdx | ((uint8(tokenData[i]) & uint8(1)) << i);\r\n        }\r\n        return effectIdx;\r\n    }\r\n\r\n    // tokenData needs to be 744 bytes\r\n    // - first 96 represents the 32 colors using 3 bytes for each color, with metadata encoded in each LSB (bonsaiIdx, backgroundIdx, effectIdx) of the first 2 bytes\r\n    // - next 648 bytes represents 2 pixels each of a 48*27 pixel image, using 5 bits for the first and 3 bits for the second pixel, i.e. 2 pixels per byte\r\n    // - the lower 5 bits represent the color index of the primary pixel\r\n    // - the upper 3 bits represent the offset index of the secondary pixel => on average 4 bits per pixel with 32 possible colors\r\n    function mintPublicSale(bytes memory tokenData) external payable nonReentrant returns (uint256) {\r\n        require(PUBLIC_SALE_MINT_PRICE == msg.value, \"Incorrect amount of ether sent\");\r\n        require(tokenData.length == 744, \"tokenData must be 744 bytes\");\r\n        require(numberOfMints < MAX_TOKENS, \"All BonsaiDreaming have been minted\");\r\n\r\n        uint8 bonsaiIdx = _getBonsaiIdx(tokenData);\r\n        uint256 tokenDataIdx = _bonsaiIdxToTokenDataIdx[bonsaiIdx];\r\n        require(tokenDataIdx == 0, \"This Bonsai has already been minted\");\r\n\r\n        tokenDataIdx = numberOfMints + 1;\r\n        \r\n        mintedBonsaiBitfield = mintedBonsaiBitfield | (uint256(1) << bonsaiIdx);\r\n        _tokenDatas.push(tokenData);  // when looking up data, subtract 1 from tokenDataIdx\r\n        _bonsaiIdxToTokenDataIdx[bonsaiIdx] = tokenDataIdx;\r\n\r\n        uint8 bgIdx = _getBgIdx(tokenData);\r\n        _backgroundCounts[bgIdx] += 1;\r\n\r\n        uint8 effectIdx = _getEffectIdx(tokenData);\r\n        _effectCounts[effectIdx] += 1;\r\n\r\n        _safeMint(msg.sender, tokenDataIdx);\r\n        numberOfMints++;\r\n\r\n        emit MintedToken(msg.sender, tokenDataIdx);\r\n        return tokenDataIdx;\r\n    }\r\n\r\n    // Hopefully this will never be used - it exists as a safeguard for preventing abuse, since any bytes can be pushed into the minting function.\r\n    // This will only be used in the case of someone pushing \"evil\" photo material, copyrighted stuff, etc. - creative/fun use will be tolerated :)\r\n    // Once minting is complete and verified, the function setMintingCompleteAndVerified() will be used to remove this functionality.\r\n    // Big props to pixelations.xyz for the inspiration for this functionality.\r\n    function overwriteExistingTokenData(bytes memory tokenData, uint256 tokenId) external onlyOwner nonReentrant {\r\n        require(tokenData.length == 744, \"tokenData must be 744 bytes\");\r\n        require(!mintingCompleteAndVerified, \"Minting is complete and bytes cannot be changed anymore\");\r\n \r\n        uint8 bonsaiIdx = _getBonsaiIdx(tokenData);\r\n        uint256 tokenDataIdx = _bonsaiIdxToTokenDataIdx[bonsaiIdx];\r\n        require(tokenDataIdx > 0, \"This Bonsai has not been minted\");\r\n        require(tokenId == tokenDataIdx, \"Found bonsai != tokenId\");\r\n\r\n        _tokenDatas[tokenDataIdx - 1] = tokenData;\r\n    }\r\n\r\n    function setMintingCompleteAndVerified() external onlyOwner {\r\n        mintingCompleteAndVerified = true;\r\n    }\r\n\r\n    // This returns the base64-encoded JSON metadata for the given token.  Metadata looks like this:\r\n    // {\r\n    //   \"name\": \"Bonsai, Dreaming #10 \",\r\n\t//   \"background_color\": \"000000\",\r\n\t//   \"description\": \"Hand-crafted bonsais, stored and rendered entirely on chain!\",\r\n\t//   \"attributes\": [\r\n\t// \t  {\r\n\t// \t  \t\"trait_type\": \"background\",\r\n\t//   \t\t\"value\": 5\r\n\t// \t  },\r\n\t// \t  {\r\n\t// \t  \t\"trait_type\": \"effect\",\r\n\t// \t  \t\"display_type\": \"number\",\r\n\t//   \t\t\"value\": 2\r\n\t// \t  }\r\n\t//   ],\r\n\t//   \"image_data\": \"<svg>...</svg>\"\r\n    // }\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(tokenId <= numberOfMints && tokenId > 0, \"Invalid tokenId\");\r\n\r\n        bytes memory tokenData = _tokenDatas[tokenId - 1];\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(  // all strings are pre-base64 encoded to save gas\r\n                    \"data:application/json;base64,eyJuYW1lIjoiQm9uc2FpLCBEcmVhbWluZyAj\",\r\n                    Base64.encode(uintToByteString(tokenId, 3)),\r\n                    \"IiwgImJhY2tncm91bmRfY29sb3IiOiAiMDAwMDAwIiwgImRlc2NyaXB0aW9uIjogIkhhbmQtY3JhZnRlZCBib25zYWlzLCBzdG9yZWQgYW5kIHJlbmRlcmVkIGVudGlyZWx5IG9uIGNoYWluISIsICJhdHRyaWJ1dGVzIjpbeyJ0cmFpdF90eXBlIjogImJhY2tncm91bmQiLCAiZGlzcGxheV90eXBlIjogIm51bWJlciIsICJ2YWx1ZSI6\",\r\n                    Base64.encode(uintToByteString(_getBgIdx(tokenData) + 1, 3)),\r\n                    \"fSwgeyJ0cmFpdF90eXBlIjogImVmZmVjdCIsICJkaXNwbGF5X3R5cGUiOiAibnVtYmVyIiwgInZhbHVlIjog\",\r\n                    Base64.encode(uintToByteString(_getEffectIdx(tokenData) + 1, 3)),\r\n                    \"fV0sImltYWdlX2RhdGEiOiAi\",\r\n                    tokenSVG(tokenId),\r\n                    \"In0g\"\r\n                )\r\n            );\r\n    }\r\n\r\n    // Handy function for only rendering the svg\r\n    function tokenSVG(uint256 tokenId) public view returns (string memory) {\r\n        require(tokenId <= numberOfMints && tokenId > 0, \"Invalid tokenId\");\r\n\r\n        string[4] memory buffer = tokenSvgDataOf(tokenId);\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"PHN2ZyB2ZXJzaW9uPScxLjEnIHZpZXdCb3g9JzAgMCAzODQgMjE2JyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHNoYXBlLXJlbmRlcmluZz0nY3Jpc3BFZGdlcyc+PGRlc2M+Qm9uc2FpLCBkcmVhbWluZyBwcm9qZWN0IDIwMjI8L2Rlc2M+\",\r\n                    buffer[0], buffer[1], buffer[2], buffer[3],\r\n                    \"PHN0eWxlPnJlY3R7d2lkdGg6OHB4O2hlaWdodDo4cHg7fTwvc3R5bGU+PC9zdmc+\"\r\n                )\r\n            );\r\n    }\r\n\r\n    // The decoding performs a number of steps:\r\n    // - First of all, the color map is decoded from the first 96 bytes of the encoded image, and stored in a string array for easy retrieval.\r\n    // - Then a number of \"nested\" buffers are filled:\r\n    //   - One 6th of a row (8 pixels) are generated 2 pixels at a time by calling the function twoPixels() with the relevant data, and collected in the oneSixthRow buffer\r\n    //   - This is done 6 times, and collected in the rowBuffer\r\n    //   - 8 rows are generated this way, and collected in the bufferOfRows (for the final iteration only 3 rows are collected, since we have 27 rows)\r\n    //   - Finally these 3x8+3 rows are collected and returned\r\n    // Big props to Chainrunners and pixelations.xyz for the inspiration for many of the functions below.\r\n    function tokenSvgDataOf(uint256 tokenId) private view returns (string[4] memory) {\r\n        SVGCursor memory cursor;\r\n\r\n        string[32] memory colorMap;\r\n        for (uint8 colorIndex = 0; colorIndex < 32; colorIndex++) {\r\n            colorMap[colorIndex] = getColor(tokenId, colorIndex);\r\n        }\r\n\r\n        string[4] memory oneSixthRow;\r\n        string[6] memory rowBuffer;\r\n\r\n        string[8] memory bufferOfRows;\r\n        uint8 indexIntoBufferOfRows;\r\n\r\n        string[4] memory bufferOfEightRows;\r\n        uint8 indexIntoBufferOfEightRows;\r\n\r\n        cursor.y = 2; // offset to support \"negative\" y values down to -2 used in the LUT\r\n        for (uint256 pixelIdx = 0; pixelIdx < 648; ) {\r\n            cursor.rowEven = (cursor.x == 0);\r\n            cursor.x += 2; // offset to support \"negative\" x values down to -2 used in the LUT\r\n            \r\n            // generate groups of 8 pixels (6 times)\r\n            for (uint8 pixelGroupIdx = 0; pixelGroupIdx < 6; pixelGroupIdx++) {\r\n                cursor.color = colorMap[getColorIndexFromPixelIndex(tokenId, pixelIdx)]; // primary pixel color is retrieved\r\n                (cursor.dx, cursor.dy) = getOffsetsFromPixelIndex(tokenId, pixelIdx++); // secondary pixel offsets are retrieved\r\n                oneSixthRow[0] = twoPixels(cursor);\r\n                cursor.x += 2;\r\n\r\n                cursor.color = colorMap[getColorIndexFromPixelIndex(tokenId, pixelIdx)];\r\n                (cursor.dx, cursor.dy) = getOffsetsFromPixelIndex(tokenId, pixelIdx++);\r\n                oneSixthRow[1] = twoPixels(cursor);\r\n                cursor.x += 2;\r\n\r\n                cursor.color = colorMap[getColorIndexFromPixelIndex(tokenId, pixelIdx)];\r\n                (cursor.dx, cursor.dy) = getOffsetsFromPixelIndex(tokenId, pixelIdx++);\r\n                oneSixthRow[2] = twoPixels(cursor);\r\n                cursor.x += 2;\r\n\r\n                cursor.color = colorMap[getColorIndexFromPixelIndex(tokenId, pixelIdx)];\r\n                (cursor.dx, cursor.dy) = getOffsetsFromPixelIndex(tokenId, pixelIdx++);\r\n                oneSixthRow[3] = twoPixels(cursor);\r\n                cursor.x += 2;\r\n\r\n                rowBuffer[pixelGroupIdx] = string(abi.encodePacked(oneSixthRow[0], oneSixthRow[1], oneSixthRow[2], oneSixthRow[3]));\r\n            }\r\n\r\n            // generate single row\r\n            bufferOfRows[indexIntoBufferOfRows++] = string(abi.encodePacked(rowBuffer[0], rowBuffer[1], rowBuffer[2], rowBuffer[3], rowBuffer[4], rowBuffer[5]));\r\n            \r\n            cursor.y += 1; // proceed to next row\r\n            cursor.x = cursor.y % 2; // since we have an even number of pixels on each line, odd lines need an offset of 1, to keep pixels spread in a checkerboard pattern\r\n            \r\n            // collect groups of 8 rows\r\n            if (indexIntoBufferOfRows >= 8) {\r\n                bufferOfEightRows[indexIntoBufferOfEightRows++] = string(\r\n                    abi.encodePacked(bufferOfRows[0], bufferOfRows[1], bufferOfRows[2], bufferOfRows[3], bufferOfRows[4], bufferOfRows[5], bufferOfRows[6], bufferOfRows[7])\r\n                );\r\n                indexIntoBufferOfRows = 0;\r\n            }\r\n            // last group only has 3 rows\r\n            if (indexIntoBufferOfEightRows == 3 && indexIntoBufferOfRows >= 3) {\r\n                bufferOfEightRows[indexIntoBufferOfEightRows++] = string(\r\n                    abi.encodePacked(bufferOfRows[0], bufferOfRows[1], bufferOfRows[2])\r\n                );\r\n                indexIntoBufferOfRows = 0;\r\n            }\r\n        }\r\n\r\n        return bufferOfEightRows;\r\n    }\r\n\r\n    // Extracts the base64-encoded hex color for a single pixel.\r\n    function getColor(uint256 tokenId, uint256 indexIntoColors) internal view returns (string memory) {\r\n        uint256 n = uint256(uint8(_tokenDatas[tokenId - 1][indexIntoColors * 3])) << 16;\r\n        n += uint256(uint8(_tokenDatas[tokenId - 1][indexIntoColors * 3 + 1])) << 8;\r\n        n += uint256(uint8(_tokenDatas[tokenId - 1][indexIntoColors * 3 + 2]));\r\n\r\n        return Base64.encode(uintToHexBytes6(n));\r\n    }\r\n\r\n    // Unpack the 5-bit value representing the color index for a given pixel (every even pixel)\r\n    function getColorIndexFromPixelIndex(uint256 tokenId, uint256 pixelIndex) internal view returns (uint8) {\r\n        return uint8(_tokenDatas[tokenId - 1][uint256(96) + pixelIndex]) & uint8(31);\r\n    }\r\n\r\n    // Unpack the 3-bit value representing the pixels to copy (every odd pixel)\r\n    function getOffsetsFromPixelIndex(uint256 tokenId, uint256 pixelIndex) internal view returns (int8, int8) {\r\n        uint8 offsetIdx = uint8(_tokenDatas[tokenId - 1][uint256(96) + pixelIndex]) >> 5;\r\n        return (_deltaX[offsetIdx], _deltaY[offsetIdx]);\r\n    }\r\n\r\n    // This function generates 2 pixels decoded from a single byte (5 bits for primary pixel color, 3 bits for secondary pixel offsets)\r\n    function twoPixels(SVGCursor memory pos) internal view returns (string memory) {\r\n        int8 xOffset = pos.rowEven ? int8(1) : int8(-1);\r\n        return string(abi.encodePacked(\r\n                    \"PHJlY3QgeD0n\",  // (primary pixel) <rect ...\r\n                    _coordinateLookup[pos.x],\r\n                    \"JyAgeT0n\",\r\n                    _coordinateLookup[pos.y],\r\n                    \"JyBmaWxsPScj\",\r\n                    pos.color,\r\n                    \"JyBpZD0n\",\r\n                    _coordinateLookup[pos.x],\r\n                    _coordinateLookup[pos.y],\r\n                    \"Jy8+PHVzZSBocmVmPScj\", // '/> (secondary pixel) <use ...\r\n                    _coordinateLookup[uint8(int8(pos.x) + xOffset + pos.dx)],\r\n                    _coordinateLookup[uint8(int8(pos.y) + pos.dy)],\r\n                    \"JyAgeD0n\",\r\n                    _coordinateLookup[uint8(2 - pos.dx)], // svg <use> blocks have relative x and y coords to the element they copy...\r\n                    \"JyAgeT0n\",\r\n                    _coordinateLookup[uint8(2 - pos.dy)],\r\n                    \"Jy8+\" // '/>\r\n                ));\r\n    }\r\n\r\n    // Big props to the community for the functions below!\r\n    function uintToHexBytes6(uint256 a) internal pure returns (bytes memory) {\r\n        string memory str = uintToHexString2(a);\r\n        if (bytes(str).length == 2) {\r\n            return abi.encodePacked(\"0000\", str);\r\n        } else if (bytes(str).length == 3) {\r\n            return abi.encodePacked(\"000\", str);\r\n        } else if (bytes(str).length == 4) {\r\n            return abi.encodePacked(\"00\", str);\r\n        } else if (bytes(str).length == 5) {\r\n            return abi.encodePacked(\"0\", str);\r\n        }\r\n\r\n        return bytes(str);\r\n    }\r\n\r\n    function uintToHexString2(uint256 a) internal pure returns (string memory) {\r\n        uint256 count = 0;\r\n        uint256 b = a;\r\n        while (b != 0) {\r\n            count++;\r\n            b /= 16;\r\n        }\r\n        bytes memory res = new bytes(count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            b = a % 16;\r\n            res[count - i - 1] = uintToHexDigit(uint8(b));\r\n            a /= 16;\r\n        }\r\n\r\n        string memory str = string(res);\r\n        if (bytes(str).length == 0) {\r\n            return \"00\";\r\n        } else if (bytes(str).length == 1) {\r\n            return string(abi.encodePacked(\"0\", str));\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function uintToHexDigit(uint8 d) internal pure returns (bytes1) {\r\n        if (0 <= d && d <= 9) {\r\n            return bytes1(uint8(bytes1(\"0\")) + d);\r\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\r\n            return bytes1(uint8(bytes1(\"a\")) + d - 10);\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function uintToByteString(uint256 a, uint256 fixedLen) internal pure returns (bytes memory _uintAsString) {\r\n        uint256 j = a;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(fixedLen);\r\n        for(j = 0; j < fixedLen; j++) {\r\n            bstr[j] = bytes1(\" \");\r\n        }\r\n        bstr[0] = bytes1(\"0\");\r\n        uint256 k = len;\r\n        while (a != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(a - (a / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            a /= 10;\r\n        }\r\n        return bstr;\r\n    }\r\n\r\n    // standard stuff\r\n    function getBalance() external view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    // opensea integreation\r\n    function contractURI() public pure returns (string memory) {\r\n        return \"https://bonsaidreaming.art/storefront.json\";\r\n    }\r\n\r\n    function updInternVal(uint256 value) external onlyOwner nonReentrant {\r\n        PUBLIC_SALE_MINT_PRICE = value;\r\n    }\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n            mstore(result, encodedLen)\r\n        }\r\n        return string(result);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "yulDetails": {
          "stackAllocation": true,
          "optimizerSteps": "dhfoDgvulfnTUtnIf"
        }
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}}