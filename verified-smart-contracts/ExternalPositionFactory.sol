{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/persistent/dispatcher/IDispatcher.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDispatcher Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IDispatcher {\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function claimOwnership() external;\n\n    function deployVaultProxy(\n        address _vaultLib,\n        address _owner,\n        address _vaultAccessor,\n        string calldata _fundName\n    ) external returns (address vaultProxy_);\n\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\n\n    function getFundDeployerForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (address fundDeployer_);\n\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (\n            address nextFundDeployer_,\n            address nextVaultAccessor_,\n            address nextVaultLib_,\n            uint256 executableTimestamp_\n        );\n\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\n\n    function getNominatedOwner() external view returns (address nominatedOwner_);\n\n    function getOwner() external view returns (address owner_);\n\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\n\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (uint256 secondsRemaining_);\n\n    function hasExecutableMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasExecutableRequest_);\n\n    function hasMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasMigrationRequest_);\n\n    function removeNominatedOwner() external;\n\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\n\n    function setMigrationTimelock(uint256 _nextTimelock) external;\n\n    function setNominatedOwner(address _nextNominatedOwner) external;\n\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\n\n    function signalMigration(\n        address _vaultProxy,\n        address _nextVaultAccessor,\n        address _nextVaultLib,\n        bool _bypassFailure\n    ) external;\n}\n"
    },
    "contracts/persistent/external-positions/ExternalPositionFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../dispatcher/IDispatcher.sol\";\nimport \"./ExternalPositionProxy.sol\";\n\n/// @title ExternalPositionFactory Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A contract factory for External Positions\ncontract ExternalPositionFactory {\n    event PositionDeployed(\n        address indexed vaultProxy,\n        uint256 indexed typeId,\n        address indexed constructLib,\n        bytes constructData\n    );\n\n    event PositionDeployerAdded(address positionDeployer);\n\n    event PositionDeployerRemoved(address positionDeployer);\n\n    event PositionTypeAdded(uint256 typeId, string label);\n\n    event PositionTypeLabelUpdated(uint256 indexed typeId, string label);\n\n    address private immutable DISPATCHER;\n\n    uint256 private positionTypeCounter;\n    mapping(uint256 => string) private positionTypeIdToLabel;\n    mapping(address => bool) private accountToIsExternalPositionProxy;\n    mapping(address => bool) private accountToIsPositionDeployer;\n\n    modifier onlyDispatcherOwner {\n        require(\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\n            \"Only the Dispatcher owner can call this function\"\n        );\n        _;\n    }\n\n    constructor(address _dispatcher) public {\n        DISPATCHER = _dispatcher;\n    }\n\n    /// @notice Creates a new external position proxy and adds it to the list of supported external positions\n    /// @param _constructData Encoded data to be used on the ExternalPositionProxy constructor\n    /// @param _vaultProxy The _vaultProxy owner of the external position\n    /// @param _typeId The type of external position to be created\n    /// @param _constructLib The external position lib contract that will be used on the constructor\n    function deploy(\n        address _vaultProxy,\n        uint256 _typeId,\n        address _constructLib,\n        bytes memory _constructData\n    ) external returns (address externalPositionProxy_) {\n        require(\n            isPositionDeployer(msg.sender),\n            \"deploy: Only a position deployer can call this function\"\n        );\n\n        externalPositionProxy_ = address(\n            new ExternalPositionProxy(_vaultProxy, _typeId, _constructLib, _constructData)\n        );\n\n        accountToIsExternalPositionProxy[externalPositionProxy_] = true;\n\n        emit PositionDeployed(_vaultProxy, _typeId, _constructLib, _constructData);\n\n        return externalPositionProxy_;\n    }\n\n    ////////////////////\n    // TYPES REGISTRY //\n    ////////////////////\n\n    /// @notice Adds a set of new position types\n    /// @param _labels Labels for each new position type\n    function addNewPositionTypes(string[] calldata _labels) external onlyDispatcherOwner {\n        for (uint256 i; i < _labels.length; i++) {\n            uint256 typeId = getPositionTypeCounter();\n            positionTypeCounter++;\n\n            positionTypeIdToLabel[typeId] = _labels[i];\n\n            emit PositionTypeAdded(typeId, _labels[i]);\n        }\n    }\n\n    /// @notice Updates a set of position type labels\n    /// @param _typeIds The position type ids\n    /// @param _labels The updated labels\n    function updatePositionTypeLabels(uint256[] calldata _typeIds, string[] calldata _labels)\n        external\n        onlyDispatcherOwner\n    {\n        require(_typeIds.length == _labels.length, \"updatePositionTypeLabels: Unequal arrays\");\n        for (uint256 i; i < _typeIds.length; i++) {\n            positionTypeIdToLabel[_typeIds[i]] = _labels[i];\n\n            emit PositionTypeLabelUpdated(_typeIds[i], _labels[i]);\n        }\n    }\n\n    /////////////////////////////////\n    // POSITION DEPLOYERS REGISTRY //\n    /////////////////////////////////\n\n    /// @notice Adds a set of new position deployers\n    /// @param _accounts Accounts to be added as position deployers\n    function addPositionDeployers(address[] memory _accounts) external onlyDispatcherOwner {\n        for (uint256 i; i < _accounts.length; i++) {\n            require(\n                !isPositionDeployer(_accounts[i]),\n                \"addPositionDeployers: Account is already a position deployer\"\n            );\n\n            accountToIsPositionDeployer[_accounts[i]] = true;\n\n            emit PositionDeployerAdded(_accounts[i]);\n        }\n    }\n\n    /// @notice Removes a set of existing position deployers\n    /// @param _accounts Existing position deployers to be removed from their role\n    function removePositionDeployers(address[] memory _accounts) external onlyDispatcherOwner {\n        for (uint256 i; i < _accounts.length; i++) {\n            require(\n                isPositionDeployer(_accounts[i]),\n                \"removePositionDeployers: Account is not a position deployer\"\n            );\n\n            accountToIsPositionDeployer[_accounts[i]] = false;\n\n            emit PositionDeployerRemoved(_accounts[i]);\n        }\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice Gets the label for a position type\n    /// @param _typeId The position type id\n    /// @return label_ The label\n    function getLabelForPositionType(uint256 _typeId)\n        external\n        view\n        returns (string memory label_)\n    {\n        return positionTypeIdToLabel[_typeId];\n    }\n\n    /// @notice Checks if an account is an external position proxy\n    /// @param _account The account to check\n    /// @return isExternalPositionProxy_ True if the account is an externalPositionProxy\n    function isExternalPositionProxy(address _account)\n        external\n        view\n        returns (bool isExternalPositionProxy_)\n    {\n        return accountToIsExternalPositionProxy[_account];\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice Gets the `DISPATCHER` variable\n    /// @return dispatcher_ The `DISPATCHER` variable value\n    function getDispatcher() public view returns (address dispatcher_) {\n        return DISPATCHER;\n    }\n\n    /// @notice Gets the `positionTypeCounter` variable\n    /// @return positionTypeCounter_ The `positionTypeCounter` variable value\n    function getPositionTypeCounter() public view returns (uint256 positionTypeCounter_) {\n        return positionTypeCounter;\n    }\n\n    /// @notice Checks if an account is a position deployer\n    /// @param _account The account to check\n    /// @return isPositionDeployer_ True if the account is a position deployer\n    function isPositionDeployer(address _account) public view returns (bool isPositionDeployer_) {\n        return accountToIsPositionDeployer[_account];\n    }\n}\n"
    },
    "contracts/persistent/external-positions/ExternalPositionProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../vault/interfaces/IExternalPositionVault.sol\";\nimport \"./IExternalPosition.sol\";\nimport \"./IExternalPositionProxy.sol\";\n\n/// @title ExternalPositionProxy Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A proxy for all external positions, modified from EIP-1822\ncontract ExternalPositionProxy is IExternalPositionProxy {\n    uint256 private immutable EXTERNAL_POSITION_TYPE;\n    address private immutable VAULT_PROXY;\n\n    /// @dev Needed to receive ETH on external positions\n    receive() external payable {}\n\n    constructor(\n        address _vaultProxy,\n        uint256 _typeId,\n        address _constructLib,\n        bytes memory _constructData\n    ) public {\n        VAULT_PROXY = _vaultProxy;\n        EXTERNAL_POSITION_TYPE = _typeId;\n\n        (bool success, bytes memory returnData) = _constructLib.delegatecall(_constructData);\n\n        require(success, string(returnData));\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address contractLogic = IExternalPositionVault(getVaultProxy())\n            .getExternalPositionLibForType(getExternalPositionType());\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(\n                sub(gas(), 10000),\n                contractLogic,\n                0x0,\n                calldatasize(),\n                0,\n                0\n            )\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n                case 0 {\n                    revert(0, retSz)\n                }\n                default {\n                    return(0, retSz)\n                }\n        }\n    }\n\n    /// @notice Delegates call to IExternalPosition.receiveCallFromVault\n    /// @param _data The bytes data variable to be decoded at the External Position\n    function receiveCallFromVault(bytes calldata _data) external {\n        require(\n            msg.sender == getVaultProxy(),\n            \"receiveCallFromVault: Only the vault can make this call\"\n        );\n        address contractLogic = IExternalPositionVault(getVaultProxy())\n            .getExternalPositionLibForType(getExternalPositionType());\n        (bool success, bytes memory returnData) = contractLogic.delegatecall(\n            abi.encodeWithSelector(IExternalPosition.receiveCallFromVault.selector, _data)\n        );\n\n        require(success, string(returnData));\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `EXTERNAL_POSITION_TYPE` variable\n    /// @return externalPositionType_ The `EXTERNAL_POSITION_TYPE` variable value\n    function getExternalPositionType()\n        public\n        view\n        override\n        returns (uint256 externalPositionType_)\n    {\n        return EXTERNAL_POSITION_TYPE;\n    }\n\n    /// @notice Gets the `VAULT_PROXY` variable\n    /// @return vaultProxy_ The `VAULT_PROXY` variable value\n    function getVaultProxy() public view override returns (address vaultProxy_) {\n        return VAULT_PROXY;\n    }\n}\n"
    },
    "contracts/persistent/external-positions/IExternalPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPosition Contract\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IExternalPosition {\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\n\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\n\n    function init(bytes memory) external;\n\n    function receiveCallFromVault(bytes memory) external;\n}\n"
    },
    "contracts/persistent/external-positions/IExternalPositionProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPositionProxy interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice An interface for publicly accessible functions on the ExternalPositionProxy\ninterface IExternalPositionProxy {\n    function getExternalPositionType() external view returns (uint256);\n\n    function getVaultProxy() external view returns (address);\n}\n"
    },
    "contracts/persistent/vault/interfaces/IExternalPositionVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPositionVault interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\ninterface IExternalPositionVault {\n    function getExternalPositionLibForType(uint256) external view returns (address);\n}\n"
    }
  }
}}