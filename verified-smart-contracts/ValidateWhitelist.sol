{"IGenArt721CoreV2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface GenArt721CoreContract {\n  function isWhitelisted(address sender) external view returns (bool);\n  function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\n  function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\n  function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\n  function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\n  function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\n  function projectIdToAdditionalPayeePercentage(uint256 _projectId) external view returns (uint256);\n  function projectTokenInfo(uint256 _projectId) external view returns (address, uint256, uint256, uint256, bool, address, uint256, string memory, address);\n  function renderProviderAddress() external view returns (address payable);\n  function renderProviderPercentage() external view returns (uint256);\n  function mint(address _to, uint256 _projectId, address _by) external returns (uint256 tokenId);\n}\n"},"IValidator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * Interface for a validation mechanism for mint destination addresses.\n */\ninterface Validator {\n    \n  /**\n   * Get error message for this validator.\n   */   \n  function errorMessage() external view returns (string memory);\n\n  /**\n   * Validates that the given destination address is validate for a mint. Function\n   * will return false if validation fails.\n   */\n  function validateMint(address _to) external view returns (bool);\n}\n"},"ValidateWhitelist.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IGenArt721CoreV2.sol\";\nimport \"./IValidator.sol\";\n\n/**\n * Validator that uses an explicit whitelist to control who\n * can receive a mint.\n */\ncontract ValidateWhitelist is Validator {\n\n  GenArt721CoreContract public artblocksContract;\n\n  string constant ErrorMessage = \"address is not in the whitelist\";\n\n  mapping(address =\u003e bool) public whitelist;\n\n  constructor(address _genArt721Address) public {\n    artblocksContract = GenArt721CoreContract(_genArt721Address);\n  }\n  \n  function batchAddToWhitelist(address[] memory _addresses) public {\n    for (uint i = 0; i \u003c _addresses.length; i++) {\n      addToWhitelist(_addresses[i]);\n    }\n  }\n\n  function addToWhitelist(address _address) public {\n    require(artblocksContract.isWhitelisted(msg.sender), \"can only be set by admin\");\n    whitelist[_address] = true;\n  }\n\n  function removeFromWhitelist(address _address) public {\n    require(artblocksContract.isWhitelisted(msg.sender), \"can only be set by admin\");\n    whitelist[_address] = false;\n  }\n\n  function errorMessage() external view returns (string memory) {\n      return ErrorMessage;\n  }\n\n  function validateMint(address _address) external view returns(bool) {\n    return whitelist[_address];\n  }\n}\n"}}