{"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"USDAssangeRoyalties.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\ncontract USDAssangeRoyalties is Ownable {\r\n    address public ADDRESS_CHARITY = 0x27a21F51327F19668799E403d667187cc5A7DFF1;\r\n    address public ADDRESS_PBOY = 0x709e17B3Ec505F80eAb064d0F2A71c743cE225B3;\r\n    address public ADDRESS_JOLAN = 0x51BdFa2Cbb25591AF58b202aCdcdB33325a325c2;\r\n\r\n    uint256[2] public SHARE_CHARITY = [90, 30];\r\n    uint256[2] public SHARE_PBOY = [8, 55];\r\n    uint256[2] public SHARE_JOLAN = [2, 15];\r\n\r\n    uint256 public SHARE_TYPE = 0;\r\n\r\n    constructor() {}\r\n\r\n    receive() external payable {}\r\n\r\n    function setShareType()\r\n    public onlyOwner {\r\n        SHARE_TYPE = SHARE_TYPE == 0 ? 1 : 0;\r\n    }\r\n\r\n    function setCharity(address CHARITY)\r\n    public onlyOwner {\r\n        ADDRESS_CHARITY = CHARITY;\r\n    }\r\n\r\n    function setPboy(address PBOY)\r\n    public {\r\n        require(msg.sender == ADDRESS_PBOY, \"error msg.sender\");\r\n        ADDRESS_PBOY = PBOY;\r\n    }\r\n\r\n    function setJolan(address JOLAN)\r\n    public {\r\n        require(msg.sender == ADDRESS_JOLAN, \"error msg.sender\");\r\n        ADDRESS_JOLAN = JOLAN;\r\n    }\r\n\r\n    function withdrawEquity()\r\n    public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n\r\n        address[3] memory shareholders = [\r\n            ADDRESS_CHARITY,\r\n            ADDRESS_PBOY,\r\n            ADDRESS_JOLAN\r\n        ];\r\n\r\n        uint256[3] memory _shares = [\r\n            SHARE_CHARITY[SHARE_TYPE] * balance / 100,\r\n            SHARE_PBOY[SHARE_TYPE] * balance / 100,\r\n            SHARE_JOLAN[SHARE_TYPE] * balance / 100\r\n        ];\r\n\r\n        uint i = 0;\r\n        while (i \u003c 3) {\r\n            require(payable(shareholders[i]).send(_shares[i]));\r\n            i++;\r\n        }\r\n    }\r\n}"}}