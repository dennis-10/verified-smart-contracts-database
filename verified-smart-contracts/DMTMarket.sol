{"dmtmarket.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title: DMT Market\n/// @author: www.sadat.pk\n\nimport \"./IERC1155Interface.sol\";\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n//                                                                                  //\n//                                                                                  //\n//                                                                                  //\n//                          ░░░░░░░░░  ░░░░░░░░░  ░░░░░░░░   ░░░░░░░░               //\n//                         ░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░              //\n//                        ░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░         //\n//                       ░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░        //\n//                      ░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░        //\n//                   ░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░░░░         //\n//                 ░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░            //\n//                ░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░           //\n//               ░░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░          //\n//                ░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░          //\n//                 ░░░░░░░░░░░   ░░░░░░░░░ ░░░░░░░░░  ░░░░░░░░░  ░░░░░░░░░          //\n//                    ░░░░░░       ░░░░       ░░░░       ░░░       ░░░░             //\n//                                                                                  //\n//                                                                                  //\n//                                                                                  //\n//                                                                                  //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n\ncontract DMTMarket {\n    uint256 private _listingId = 0;\n\tmapping(uint256 =\u003e Listing) private _listings;\n    mapping(address =\u003e uint256) public balances;\n\n    struct Listing {\n    address contractAddr;\n    uint256 tokenId;\n    uint256 amount;\n    uint256 price;\n    address seller;\n    }\n    function list(address contractAddr, uint256 tokenId, uint256 amount, uint256 price) public {\n        require(IERC1155(contractAddr).balanceOf(msg.sender, tokenId) \u003e= amount, \"must own enough supply\");\n        require(IERC1155(contractAddr).isApprovedForAll(msg.sender, address(this)), \"contract not approved\");\n        Listing memory listing = Listing(contractAddr, tokenId, amount, price, msg.sender);\n\t\t_listingId++;\n\t\t_listings[_listingId] = listing;\n    }\n    function getlisting(uint256 listingId) public view returns (Listing memory) {\n\t\treturn _listings[listingId];\n\t}\n\n    function buy(uint256 listingId, uint256 amount) external payable {\n\t\tListing storage listing = _listings[listingId];\n\t\trequire(msg.sender != listing.seller, \"seller cannot be buyer\");\n        require(IERC1155(listing.contractAddr).balanceOf(listing.seller, listing.tokenId) \u003e= amount, \"not enough supply\");\n        require(msg.value \u003e= listing.price * amount, \"insufficient eth sent\");\n        balances[listing.seller] += msg.value;\n        IERC1155(listing.contractAddr).safeTransferFrom(listing.seller, msg.sender, listing.tokenId, amount, \"\");\n        listing.amount = listing.amount - amount;\n\n\t}\n\n    function withdraw(uint256 amount, address payable destAddr) public {\n        require(amount \u003c= balances[msg.sender], \"insufficient funds\");\n        balances[msg.sender] -= amount;\n        destAddr.transfer(amount);\n    }\n}"},"IERC1155Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IERC1155 {\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n    }"}}